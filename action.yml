name: "Rebuild Armbian and Kernel"
author: "https://github.com/ophub/amlogic-s9xxx-armbian"
description: "Support Amlogic, Rockchip and Allwinner boxes."
inputs:
  # Select build target
  build_target:
    description: "Select build target: armbian / kernel"
    required: false
    default: "armbian"
  # For build armbian -----
  armbian_path:
    description: "Set Armbian file path."
    required: false
    default: "build/output/images/*.img"
  armbian_board:
    description: "Set device Board."
    required: false
    default: "all"
  kernel_repo:
    description: "Set kernel repository."
    required: false
    default: "ophub/kernel"
  kernel_usage:
    description: "Set the tags of the stable kernel."
    required: false
    default: "stable"
  armbian_kernel:
    description: "Set kernel version."
    required: false
    default: "6.1.y_6.12.y"
  auto_kernel:
    description: "Auto use the latest kernel."
    required: false
    default: "true"
  armbian_fstype:
    description: "Set armbian rootfs type: ext4 / btrfs"
    required: false
    default: "ext4"
  armbian_size:
    description: "Set armbian rootfs size(Unit: MiB)."
    required: false
    default: ""
  builder_name:
    description: "Set Armbian builder signature."
    required: false
    default: ""
  # For compile kernel -----
  kernel_source:
    description: "Select the kernel source code"
    required: false
    default: "unifreq"
  kernel_version:
    description: "Select kernel version"
    required: false
    default: "6.1.y_6.12.y"
  kernel_auto:
    description: "Auto use the latest kernel"
    required: false
    default: "true"
  kernel_package:
    description: "Select compile package list"
    required: false
    default: "all"
  kernel_sign:
    description: "Set the kernel custom signature"
    required: false
    default: "-ophub"
  kernel_toolchain:
    description: "Select the compilation toolchain"
    required: false
    default: "clang"
  kernel_config:
    description: "Set the path of kernel .config"
    required: false
    default: "false"
  kernel_patch:
    description: "Set the directory for kernel patches"
    required: false
    default: "false"
  auto_patch:
    description: "Set whether to use kernel patches"
    required: false
    default: "false"
  compress_format:
    description: "Set the initrd compression format"
    required: false
    default: "xz"
  delete_source:
    description: "Set whether to delete the kernel source"
    required: false
    default: "false"
  silent_log:
    description: "Set whether to use silent log output"
    required: false
    default: "false"
outputs:
  packaged_outputtags:
    description: "The tags of the built Armbian image."
    value: ${{ steps.build.outputs.packaged_outputtags }}
  packaged_outputpath:
    description: "The output path of the built Armbian image."
    value: ${{ steps.build.outputs.packaged_outputpath }}
  packaged_outputdate:
    description: "The date when the Armbian image was built."
    value: ${{ steps.build.outputs.packaged_outputdate }}
  packaged_status:
    description: "The status of the build process."
    value: ${{ steps.build.outputs.packaged_status }}
runs:
  using: "composite"
  steps:
    - name: Build
      shell: bash
      run: |
        STEPS="[\033[95m STEPS \033[0m]"
        INFO="[\033[94m INFO \033[0m]"
        SUCCESS="[\033[92m SUCCESS \033[0m]"
        WARNING="[\033[93m WARNING \033[0m]"
        ERROR="[\033[91m ERROR \033[0m]"

        cd ${{ github.action_path }}
        echo -e "${INFO} Current running path: [ ${PWD} ]"
        build_target="${{ inputs.build_target }}"
        [[ -z "${build_target}" ]] && build_target="armbian"

        if [[ "${build_target}" == "armbian" ]]; then

            cd ${{ github.action_path }}
            echo -e "${STEPS} Setting up build..."

            armbian_file="${{ inputs.armbian_path }}"
            armbian_filename="${armbian_file##*/}"
            armbian_filepath="build/output/images"
            [[ -z "${armbian_file}" ]] && echo -e "${ERROR} The [ armbian_path ] variable must be specified." && exit 1
            [[ -d "${armbian_filepath}" ]] || mkdir -p ${armbian_filepath}
            if [[ "${armbian_file}" == http* ]]; then
                echo -e "${STEPS} Downloading Armbian file: [ ${armbian_file} ]"
                curl -fsSL "${armbian_file}" -o "${armbian_filepath}/${armbian_filename}"
            else
                if [[ -z "$(ls ${armbian_filepath}/${armbian_filename} 2>/dev/null)" ]]; then
                    cp -vf ${GITHUB_WORKSPACE}/${armbian_file} ${armbian_filepath} 2>/dev/null
                else
                    echo -e "${WARNING} The [ ${armbian_filepath}/${armbian_filename} ] file already exists, not overwriting."
                fi
            fi
            sync
            echo -e "${INFO} Files in [ ${armbian_filepath} ]: \n$(ls -lh ${armbian_filepath} 2>/dev/null)"

            cd ${armbian_filepath}
            echo -e "${STEPS} Verifying the Armbian file's format..."
            down_file="$(ls -l *.img* 2>/dev/null | grep "^-" | awk '{print $9}' | sort -u | head -n 1)"
            if [[ -z "${down_file}" ]]; then
                echo -e "${ERROR} The Armbian file is invalid."
                exit 1
            fi
            [[ "${down_file:0-7}" == ".img.gz" ]] && gzip -df ${down_file} 2>/dev/null && sync
            [[ "${down_file:0-7}" == ".img.xz" ]] && xz -d ${down_file} 2>/dev/null && sync
            [[ "${down_file:0-4}" == ".zip" ]] && unzip -o ${down_file} 2>/dev/null && sync
            echo -e "${INFO} Using Armbian file: \n$(ls -lh *.img 2>/dev/null)"

            echo -e "${STEPS} Verifying the Armbian file name (-trunk_)..."
            image_file="$(ls *.img 2>/dev/null | head -n 1)"
            if [[ "${image_file}" =~ "-trunk_" ]]; then
                echo -e "${SUCCESS} The Armbian file name is correct."
            else
                echo -e "${STEPS} Armbian file name was incorrect, modifying..."
                image_version="$(echo ${image_file} | grep -oE '[2-9][0-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
                image_kernel="$(echo ${image_file} | grep -oE '[5-9]\.[0-9]{1,2}\.[0-9]{1,3}' | head -n 1)"
                image_save_name="Armbian_${image_version}-trunk_${image_kernel}.img"
                rm -f ${image_save_name}
                mv -f ${image_file} ${image_save_name}
                echo -e "${INFO} Renamed Armbian file to [ ${image_save_name} ]"
            fi

            cd ${{ github.action_path }}
            echo -e "${STEPS} Rebuilding Armbian..."
            rebuild_command=""
            [[ -n "${{ inputs.armbian_board }}" ]] && rebuild_command="${rebuild_command} -b ${{ inputs.armbian_board }}"
            [[ -n "${{ inputs.kernel_repo }}" ]] && rebuild_command="${rebuild_command} -r ${{ inputs.kernel_repo }}"
            [[ -n "${{ inputs.kernel_usage }}" ]] && rebuild_command="${rebuild_command} -u ${{ inputs.kernel_usage }}"
            [[ -n "${{ inputs.armbian_kernel }}" ]] && rebuild_command="${rebuild_command} -k ${{ inputs.armbian_kernel }}"
            [[ -n "${{ inputs.auto_kernel }}" ]] && rebuild_command="${rebuild_command} -a ${{ inputs.auto_kernel }}"
            [[ -n "${{ inputs.armbian_fstype }}" ]] && rebuild_command="${rebuild_command} -t ${{ inputs.armbian_fstype }}"
            [[ -n "${{ inputs.armbian_size }}" ]] && rebuild_command="${rebuild_command} -s ${{ inputs.armbian_size }}"
            [[ -n "${{ inputs.builder_name }}" ]] && rebuild_command="${rebuild_command} -n ${{ inputs.builder_name }}"
            echo -e "${INFO} Full rebuild command: ./rebuild ${rebuild_command}"
            sudo ./rebuild ${rebuild_command}
            echo -e "${SUCCESS} Rebuilt Armbian."

            echo -e "${STEPS} Compressing Armbian image file..."
            cd ${{ github.action_path }}/${armbian_filepath}
            # Compress Armbian image file
            pigz -qf *.img || gzip -qf *.img
            # Generate a sha256sum verification file for each Armbian image file
            for file in *; do [[ -f "${file}" ]] && sha256sum "${file}" >"${file}.sha" 2>/dev/null; done
            rm -f *.sha.sha 2>/dev/null
            sync && sleep 3

            cd ${{ github.action_path }}
            echo "output_path=${PWD}/${armbian_filepath}" >> ${GITHUB_OUTPUT}
            echo "build_date=$(date +"%m.%d.%H%M")" >> ${GITHUB_OUTPUT}
            echo "status=success" >> ${GITHUB_OUTPUT}
            
            echo -e "${INFO} Final workflow output variables:"
            echo -e "    output_path: ${PWD}/${armbian_filepath}"
            echo -e "    build_date: $(date +"%m.%d.%H%M")"
            echo -e "    status: success"
            echo -e "    output_path files list: \n$(ls -lh ${PWD}/${armbian_filepath}/ 2>/dev/null)"

        elif [[ "${build_target}" == "kernel" ]]; then

            cd ${{ github.action_path }}
            echo -e "${STEPS} Compiling kernel..."

            config_filepath="compile-kernel/tools/config"
            kernel_outpath="compile-kernel/output"
            [[ -d "${config_filepath}" ]] || mkdir -p ${config_filepath}
            if [[ -n "${{ inputs.kernel_config }}" && "${{ inputs.kernel_config }}" != "false" ]]; then
                if [[ "$(ls ${GITHUB_WORKSPACE}/${{ inputs.kernel_config }}/config-* -l 2>/dev/null | grep "^-" | wc -l)" -ne "0" ]]; then
                    echo -e "${INFO} Using custom kernel configs from [ ${{ inputs.kernel_config }} ]..."
                    rm -f ${config_filepath}/* 2>/dev/null && sync
                    cp -vf ${GITHUB_WORKSPACE}/${{ inputs.kernel_config }}/config-* ${config_filepath}/ 2>/dev/null && sync
                    echo -e "${INFO} Custom kernel configs: \n$(ls -lh ${config_filepath})"
                else
                    echo -e "${ERROR} The custom kernel config path is invalid: [ ${{ inputs.kernel_config }} ]"
                    exit 1
                fi
            else
                echo -e "${INFO} Using the default kernel configs."
            fi
            
      
            custom_kernel_patch="compile-kernel/tools/patch"
            [[ -d "${custom_kernel_patch}" ]] || mkdir -p ${custom_kernel_patch}
            if [[ -n "${{ inputs.kernel_patch }}" && "${{ inputs.kernel_patch }}" != "false" ]]; then
                if [[ -d "${GITHUB_WORKSPACE}/${{ inputs.kernel_patch }}" ]]; then
                    echo -e "${INFO} Using custom kernel patches from [ ${{ inputs.kernel_patch }} ]..."
                    rm -rf ${custom_kernel_patch}/* 2>/dev/null && sync
                    cp -vrf ${GITHUB_WORKSPACE}/${{ inputs.kernel_patch }}/* -t ${custom_kernel_patch} && sync
                    echo -e "Directory of custom kernel patches: \n$(ls -lh ${custom_kernel_patch})"
                else
                    echo -e "${ERROR} Invalid kernel patch directory: [ ${{ inputs.kernel_patch }} ]"
                    exit 1
                fi
            else
                echo -e "{INFO} Not using apply kernel patches."
            fi

            echo -e "${STEPS} Compiling kernel..."
            recompile_command=""
            [[ -n "${{ inputs.kernel_source }}" ]] && recompile_command="${recompile_command} -r ${{ inputs.kernel_source }}"
            [[ -n "${{ inputs.kernel_version }}" ]] && recompile_command="${recompile_command} -k ${{ inputs.kernel_version }}"
            [[ -n "${{ inputs.kernel_auto }}" ]] && recompile_command="${recompile_command} -a ${{ inputs.kernel_auto }}"
            [[ -n "${{ inputs.kernel_package }}" ]] && recompile_command="${recompile_command} -m ${{ inputs.kernel_package }}"
            [[ -n "${{ inputs.auto_patch }}" ]] && recompile_command="${recompile_command} -p ${{ inputs.auto_patch }}"
            [[ -n "${{ inputs.kernel_sign }}" ]] && recompile_command="${recompile_command} -n ${{ inputs.kernel_sign }}"
            [[ -n "${{ inputs.kernel_toolchain }}" ]] && recompile_command="${recompile_command} -t ${{ inputs.kernel_toolchain }}"
            [[ -n "${{ inputs.compress_format }}" ]] && recompile_command="${recompile_command} -c ${{ inputs.compress_format }}"
            [[ -n "${{ inputs.delete_source }}" ]] && recompile_command="${recompile_command} -d ${{ inputs.delete_source }}"
            [[ -n "${{ inputs.silent_log }}" ]] && recompile_command="${recompile_command} -s ${{ inputs.silent_log }}"
            echo -e "${INFO} Full recompile command: ./recompile ${recompile_command}"
            sudo ./recompile ${recompile_command}
            echo -e "${SUCCESS} Kernel compiled."


            cd ${{ github.action_path }}
            tags="$(ls -l ${PWD}/${kernel_outpath}/*.tar.gz | awk '{print $9}' | grep -oE '[1-9][0-9]{0,2}\.[0-9]{1,3}\.[0-9]+' | xargs | tr "[ ]" "_")"
            echo "tags=${tags}" >> ${GITHUB_OUTPUT}
            echo "output_path=${PWD}/${kernel_outpath}" >> ${GITHUB_OUTPUT}
            echo "build_date=$(date +"%m.%d.%H%M")" >> ${GITHUB_OUTPUT}
            echo "status=success" >> ${GITHUB_OUTPUT}

            echo -e "${INFO} Final workflow output variables:"
            echo -e "    tags: ${tags}"
            echo -e "    output_path: ${PWD}/${kernel_outpath}"
            echo -e "    build_date: $(date +"%m.%d.%H%M")"
            echo -e "    status: success"
            echo -e "    output_path files list: \n$(ls -lh ${PWD}/${kernel_outpath}/ 2>/dev/null)"

        else
            echo -e "${ERROR} No build target was selected! It must be either \"armbian\" or \"kernel\""
            exit 1
        fi

branding:
  icon: "terminal"
  color: "gray-dark"
